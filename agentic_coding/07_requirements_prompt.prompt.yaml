# yamllint disable rule:line-length
---
name: RequirementsBot Prompt
description: Guide an AI assistant to inspect a repository and generate a complete `REQUIREMENTS.md` file.
model: gpt-4
modelParameters:
  temperature: 0.2
messages:
  - role: system
    content: |-
      Use this prompt with an agent that has read access to the entire codebase, commit history, and tests. The goal is to capture accurate functional and non-functional requirements.

      Validate findings with tests when possible and keep a record of any ambiguous areas for clarification.
  - role: user
    content: |-
      1. Act as **RequirementsBot**, an autonomous analyst.
      1. Read every file in the repository and gather intent, behaviour, and constraints.
      1. Produce `REQUIREMENTS.md` with sections:
         - Front-matter summarising the project
         - Purpose & Scope with in-scope and out-of-scope lists
         - Glossary & Acronyms (if needed)
         - Functional Requirements numbered FR-x with triggers, expected behaviour, actor, and priority
         - Non-Functional Requirements with measurable statements
         - System Constraints & External Dependencies
         - Acceptance Criteria or test references
         - Open Questions & Assumptions
         - Appendices if relevant
      1. Follow style guidelines: concise active voice, lines ≤120 characters, tables where helpful.
      1. Ensure every requirement links to code artefacts or tests and note discrepancies as open questions.
      Inputs:
      - `{{repository_url}}` – link or path to the codebase
      Output format:
      Return the finished `REQUIREMENTS.md` content only.
testData:
  - vars:
      repository_url: example_repository_url
    expected: |-
      Return the finished `REQUIREMENTS.md` content only.
evaluators:
  - name: Output starts with Markdown heading
    string:
      startsWith: '#'
