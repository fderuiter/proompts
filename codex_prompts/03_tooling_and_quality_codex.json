{
  "id": "02-tooling-and-quality-codex",
  "title": "Tooling, Linting & Quality Gates (OpenAI Codex)",
  "category": "codex_prompts",
  "author": "fderuiter",
  "created": "2025-07-18",
  "last_modified": "2025-07-18",
  "tested_model": "gpt-4",
  "temperature": 0.2,
  "tags": [],
  "prompt": {
    "purpose": "Add opinionated linters, formatters, type-checkers, commit hooks, and test frameworks so the repo \u201cfails fast\u201d on bad code.",
    "context": "- A repository already exists (created via `project-init.codex.prompt.md`).\n- The primary language(s) were specified by the caller.\n- CI provider defaults to **GitHub Actions**.",
    "instructions": "1. Detect language(s) and apply tooling:\n   - **JS/TS** \u2192 ESLint + Prettier, TypeScript strict, `husky` + `lint-staged`.\n   - **Python** \u2192 Ruff/Flake8, Black, Mypy, pre-commit.\n1. Add test framework:\n   - **JS/TS** \u2192 Vitest (or Jest).\n   - **Python** \u2192 Pytest with coverage \u2265 80 %.\n1. Create / update config files (`.eslintrc`, `pyproject.toml`, etc.).\n1. Produce a **`quality.yml` GitHub Action**: install \u2192 lint \u2192 test \u2192 upload coverage.\n1. Reply with:\n   - Any new or patched files (triple-back-tick blocks).\n   - A short \u201cHow to run locally\u201d snippet (`pnpm test`, `pytest -q`, \u2026).",
    "inputs": "",
    "output_format": "",
    "additional_notes": "- Merge, don\u2019t clobber, any existing config.\n- Use the `.env.example` from step 1 to inject `OPENAI_API_KEY` in integration tests if needed.",
    "example_usage": "> Paste this prompt into ChatGPT from the root of your repo.\n> Tell ChatGPT the primary language if it can\u2019t infer it (for polyglot repos).",
    "references": "- [Quality Gates Standard](../docs/quality/gates.md)"
  }
}