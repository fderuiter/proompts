{
  "id": "02-codebase-testing-plan",
  "title": "codebase-testing-plan.prompt.md",
  "category": "codex_prompts",
  "author": "fderuiter",
  "created": "2025-07-18",
  "last_modified": "2025-07-18",
  "tested_model": "gpt-4",
  "temperature": 0.2,
  "tags": [],
  "prompt": {
    "purpose": "Generate a detailed analysis of an existing codebase **and** produce a step-by-step plan to introduce or improve automated testing, aligned with project priorities, team skills, and CI/CD constraints.",
    "context": "- **Codebase**\n   - Language(s) & framework(s) in use (e.g., TypeScript + React, Python +Django, Go micro-services).\n   - Current repository structure and build tooling (monorepo? workspaces? Make? Nx?).\n\n- **Project Constraints**\n   - Release cadence, regulatory requirements, non-functional requirements (performance, security, accessibility).\n   - Team size, testing experience, and CI infrastructure.\n\n- **Existing Quality Signals**\n   - Any legacy test suites, lint rules, static analysis, code coverage reports, incident post-mortems, or flaky-test dashboards.\n\n- **Desired Outcomes**\n   - Faster releases? Higher reliability? Migration safety net? Explicitly list primary drivers.\n\n> **Attach or link** the repository root (or a representative subset) so Copilot Chat can inspect folder and file patterns.",
    "instructions": "<!-- Comprehensive \u201cTesting Strategy & Roadmap\u201d prompt -->\n\n- **Inventory & Baseline**\n   - Parse the repository to map modules, layers, and key entry points.\n   - Identify existing tests (unit, integration, e2e) and current coverage %.\n   - Surface \u201chot spots\u201d (high churn \u00d7 low tests) and critical paths (auth, payments).\n\n- **Risk-Based Prioritization**\n   - Classify components by business risk and complexity.\n   - Propose a \u201ctest pyramid\u201d tailored to the stack (unit \u203a service \u203a contract \u203a UI \u203a e2e).\n   - Highlight quick wins (pure functions), high-risk areas (concurrency, security), and refactors needed for testability.\n\n- **Framework & Tooling Selection**\n   - Recommend test runner(s), assertion libs, mocking/stubbing frameworks, fixture generators, and coverage tools per language.\n   - Define naming conventions, file locations (`__tests__`, `.spec.ts`, etc.), and CI commands.\n\n- **Road-Mapped Milestones**\n   - **Phase 0 \u2013 Foundation**: Linting, formatter, pre-commit hooks, basic unit test skeleton.\n   - **Phase 1 \u2013 Critical Units & Services**: Cover top-priority modules to 70 %+.\n   - **Phase 2 \u2013 Integration & Contract Tests**: Add service-to-service/DB tests, schema contracts, test containers.\n   - **Phase 3 \u2013 End-to-End & Non-Functional**: UI flows with Playwright/Cypress, performance benchmarks, security scans.\n   - **Phase 4 \u2013 Continuous Improvement**: Add mutation testing, flaky-test detection, nightly stress suites.\n\n- **CI/CD Integration**\n   - Insert steps in existing pipeline (GitHub Actions, GitLab CI, Jenkins) for test execution, coverage gating, and artifact upload.\n   - Fail thresholds on coverage drops; notify via chat ops.\n\n- **Metrics & Reporting**\n   - Adopt KPIs: coverage %, mean time to detection, test flake rate, deployment rollback count.\n   - Automate dashboards (e.g., SonarQube, Codecov) and publish daily summaries.\n\n- **Governance & Best Practices**\n   - Define code-review checklist items related to tests.\n   - Introduce testing \u201ccontracts\u201d for new modules (TDD/ATDD optional).\n   - Schedule recurring audit of flaky tests and dependency updates.\n\n- **Knowledge-Sharing**\n   - Draft internal wiki pages, lunch-and-learns, and pairing mentorship sessions to upskill the team.\n   - Provide a contribution guide with sample test patterns and anti-patterns.\n\n- **Edge Cases & Future Enhancements**\n   - Chaos engineering for resilience.\n   - Cross-browser/device matrix expansion.\n   - Progressive adoption of property-based and mutation testing.",
    "inputs": "",
    "output_format": "",
    "additional_notes": "- If no repository is attached, ask the user to provide a zip or Git URL.\n- For polyglot repos, outline strategy per language, noting shared tooling (e.g., Docker, Make).\n- Respect any regulatory or PII constraints when suggesting test data.\n- Encourage a \u201cthin slice\u201d vertical approach for early wins rather than blanket coverage targets.",
    "example_usage": "1. **Attach Context** \u2192 select the root of the service folder and `ci.yml`.\n1. **Send prompt**:\n\n   > \u201cHere is the current codebase (Node.js + Express). We deploy weekly and have zero automated tests. We care most about preventing regressions in our billing logic.\u201d\n\n1. Copilot Chat responds with the full analysis and phased testing roadmap.",
    "references": ""
  }
}