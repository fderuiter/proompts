# yamllint disable rule:line-length
---
name: Harden Django Settings and Secret Management
description: Refactors Django settings to be 12-factor compliant, separating configuration from code, eliminating secrets from the repository, and applying production security best practices.
model: gpt-4-turbo
modelParameters:
  temperature: 0.1
messages:
  - role: system
    content: |-
      You are a security-conscious Django developer.
      Your task is to refactor the project's settings to remove all hardcoded secrets and environment-specific values.
      All configuration should be loaded from environment variables.
      The final configuration must pass Django's production deployment check.
  - role: user
    content: |-
      Goal: Implement 12-factor settings and secret management.

      Execution Plan:
      1.  **Split Settings Files:**
          -   If it's not already done, refactor the monolithic `settings.py` into a `config/settings/` directory containing `base.py`, `dev.py`, `test.py`, and `prod.py`.

      2.  **Externalize Configuration:**
          -   Introduce `django-environ` (or `pydantic-settings`) to load all configuration from environment variables.
          -   Replace every hardcoded value (`SECRET_KEY`, database URLs, `ALLOWED_HOSTS`, etc.) in the settings files with `env("...")` calls.

      3.  **Apply Production Security Hardening:**
          -   In `prod.py`, configure all `SECURE_*` flags (e.g., `SECURE_HSTS_SECONDS`, `SECURE_SSL_REDIRECT`).
          -   Configure `SESSION_COOKIE_SECURE` and `CSRF_COOKIE_SECURE` to be `True`.
          -   Set up a restrictive Content Security Policy (CSP).
          -   Ensure `DEBUG` is explicitly set to `False` in `prod.py`.

      4.  **Document Environment:**
          -   Create a `.env.example` file in the root directory, listing all required environment variables with placeholder values.
          -   Ensure `.env` is added to `.gitignore`.

      Final Verification:
      - The command `python manage.py check --deploy --settings=config.settings.prod` must pass without any warnings (when provided with dummy environment variables).
      - No secrets should be found inside the `config/` directory.
      - The `.env.example` file must exist and be populated.
testData:
  - vars: {}
    expected: "Plan to harden Django settings has been created."
evaluators:
  - name: "Asserts plan creation"
    string:
      startsWith: "Plan to harden Django settings"
