---
name: Tooling, Linting & Quality Gates (OpenAI Codex)
description: Add opinionated linters, formatters, type-checkers, commit hooks,
  and test frameworks so the repo “fails fast” on bad code.
model: gpt-4
modelParameters:
  temperature: 0.2
messages:
  - role: system
    content: |-
      - A repository already exists (created via `project-init.codex.prompt.md`).
      - The primary language(s) were specified by the caller.
      - CI provider defaults to **GitHub Actions**.

      1. Detect language(s) and apply tooling:
         - **JS/TS** → ESLint + Prettier, TypeScript strict, `husky` + `lint-staged`.
         - **Python** → Ruff/Flake8, Black, Mypy, pre-commit.
      2. Add test framework:
         - **JS/TS** → Vitest (or Jest).
         - **Python** → Pytest with coverage ≥ 80 %.
      3. Create / update config files (`.eslintrc`, `pyproject.toml`, etc.).
      4. Produce a **`quality.yml` GitHub Action**: install → lint → test → upload coverage.
      5. Reply with:
         - Any new or patched files (triple-back-tick blocks).
         - A short “How to run locally” snippet (`pnpm test`, `pytest -q`, …).

      - Merge, don’t clobber, any existing config.
      - Use the `.env.example` from step 1 to inject `OPENAI_API_KEY` in integration tests if needed.
  - role: user
    content: |-
      {{input}}
testData:
  - input: |-
      language: javascript
    expected: Tooling Added -
evaluators:
  - name: Output starts with 'Tooling Added -'
    string:
      startsWith: 'Tooling Added -'
